import re
import sys
import subprocess
import requests
import logging
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
TELEGRAM_TOKEN = '7096335364:AAEhZiJzIeW3SZ3gkyj0wtgKX1ons6DM0uI'
CHAT_ID = '1864831807'

# –ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É SSH
LOG_FILE = '/var/log/auth.log'
LOG_FILENAME = '/var/log/ssh_monitor.log'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

class SSHEvent:
    def __init__(self, time_str, username, client_ip, port, status, auth_type, details=""):
        self.time = time_str.strip()
        self.username = username.strip()
        self.client_ip = client_ip.strip()
        self.port = port.strip()
        self.status = status.strip()
        self.auth_type = auth_type.strip()
        self.details = details.strip()

    def __str__(self):
        return (f"SSH Event:\n"
                f"Time: {self.time}\n"
                f"Username: {self.username}\n"
                f"IP: {self.client_ip}\n"
                f"Port: {self.port}\n"
                f"Status: {self.status}\n"
                f"Auth Type: {self.auth_type}\n"
                f"Details: {self.details}\n")


def send_telegram_message(event: SSHEvent):
    emoji_map = {
        "Accepted": "‚úÖ",
        "Failed": "‚ùå",
        "Invalid": "‚ö†Ô∏è",
        "Closed": "üö™",
        "Disconnected": "üîå",
        "AuthFailure": "üîí",
        "SessionOpened": "üîì",
        "SessionClosed": "üö™",
        "Error": "‚ùó"
    }
    emoji = emoji_map.get(event.status, "‚ö†Ô∏è")
    
    message = (f"{emoji} –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ SSH:\n"
               f"‚è∞ –í—Ä–µ–º—è: {event.time}\n"
               f"üîë –°—Ç–∞—Ç—É—Å: {event.status}\n"
               f"üë® User: {event.username}\n"
               f"üåç IP: {event.client_ip}\n"
               f"üîí –ú–µ—Ç–æ–¥: {event.auth_type}\n"
               f"üîå –ü–æ—Ä—Ç: {event.port}\n"
               f"‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {event.details}")
    
    try:
        response = requests.get(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            params={'chat_id': CHAT_ID, 'text': message, 'parse_mode': 'HTML'},
            timeout=10
        )
        if response.ok:
            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {event.time} | {event.status}")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
    except requests.exceptions.RequestException as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram: {str(e)}")


def parse_ssh_line(line: str) -> SSHEvent or None:
    line = line.strip().replace('\t', ' ').replace('  ', ' ')
    
    patterns = [
        {  # –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            'pattern': re.compile(r'(?P<time>\w+ \d+ \d+:\d+:\d+) .* sshd\[\d+\]: Accepted (?P<auth_type>\w+) for (?P<username>\S+) from (?P<client_ip>\S+) port (?P<port>\d+)'),
            'status': 'Accepted'
        },
        {  # –ù–µ—É–¥–∞—á–Ω—ã–π –≤—Ö–æ–¥
            'pattern': re.compile(r'(?P<time>\w+ \d+ \d+:\d+:\d+) .* sshd\[\d+\]: Failed password for (invalid user )?(?P<username>\S+) from (?P<client_ip>\S+) port (?P<port>\d+)'),
            'status': 'Failed'
        },
        {  # –°–µ—Å—Å–∏—è –æ—Ç–∫—Ä—ã—Ç–∞
            'pattern': re.compile(r'(?P<time>\w+ \d+ \d+:\d+:\d+) .* pam_unix\(sshd:session\): session opened for user (?P<username>\S+)'),
            'status': 'SessionOpened',
            'auth_type': 'PAM'
        },
        {  # –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞
            'pattern': re.compile(r'(?P<time>\w+ \d+ \d+:\d+:\d+) .* pam_unix\(sshd:session\): session closed for user (?P<username>\S+)'),
            'status': 'SessionClosed',
            'auth_type': 'PAM'
        },
        {  # –ù–æ–≤—ã–π —Å–µ–∞–Ω—Å systemd-logind
            'pattern': re.compile(r'(?P<time>\w+ \d+ \d+:\d+:\d+) .* systemd-logind\[\d+\]: New session \d+ of user (?P<username>\S+)'),
            'status': 'SessionOpened'
        },
        {  # –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ systemd-logind
            'pattern': re.compile(r'(?P<time>\w+ \d+ \d+:\d+:\d+) .* systemd-logind\[\d+\]: Session \d+ logged out. Waiting for processes to exit.'),
            'status': 'SessionClosed'
        },
        {  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            'pattern': re.compile(r'(?P<time>\w+ \d+ \d+:\d+:\d+) .* sshd\[\d+\]: Received disconnect from (?P<client_ip>\S+) port (?P<port>\d+):'),
            'status': 'Disconnected'
        },
        {  # –û—à–∏–±–∫–∏ SSH
            'pattern': re.compile(r'(?P<time>\w+ \d+ \d+:\d+:\d+) .* sshd\[\d+\]: error: (?P<details>.+)'),
            'status': 'Error'
        }
    ]

    for rule in patterns:
        match = rule['pattern'].search(line)
        if match:
            groups = match.groupdict()
            return SSHEvent(
                time_str=groups['time'],
                username=groups.get('username', 'N/A'),
                client_ip=groups.get('client_ip', 'N/A'),
                port=groups.get('port', 'N/A'),
                status=rule['status'],
                auth_type=rule.get('auth_type', 'N/A'),
                details=line
            )
    
    logging.warning(f"‚ö†Ô∏è –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞: {line}")
    return None


def follow_log_file(log_file: str):
    try:
        logging.info(f"–ù–∞—á–∞–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {log_file}")
        process = subprocess.Popen(['tail', '-n', '0', '-F', log_file], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        
        for line in iter(process.stdout.readline, ''):
            yield line.strip()
    except KeyboardInterrupt:
        process.terminate()
        logging.info("–°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)


def main():
    logging.info("üöÄ –°–∫—Ä–∏–ø—Ç SSH Monitor –∑–∞–ø—É—â–µ–Ω")
    for line in follow_log_file(LOG_FILE):
        event = parse_ssh_line(line)
        if event:
            logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event.time} | {event.status}")
            send_telegram_message(event)

if __name__ == "__main__":
    main()